name: Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      route1:
        description: 'Route 1 (JSON format: {"origin": "XXX", "destination": "YYY"})'
        required: false
        type: string
      route2:
        description: 'Route 2 (JSON format: {"origin": "XXX", "destination": "YYY"})'
        required: false
        type: string
      departure_date_start:
        description: 'Start of departure date range (YYYY-MM-DD)'
        required: false
        type: string
      departure_date_end:
        description: 'End of departure date range (YYYY-MM-DD)'
        required: false
        type: string
      return_date_start:
        description: 'Start of return date range (YYYY-MM-DD)'
        required: false
        type: string
      return_date_end:
        description: 'End of return date range (YYYY-MM-DD)'
        required: false
        type: string
      max_price:
        description: 'Maximum price'
        required: false
        type: number

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          npm install
          npm install -g jq
      
      - name: Update config if inputs provided
        run: |
          if [[ -n "${{ inputs.route1 }}" || -n "${{ inputs.departure_date_start }}" || -n "${{ inputs.max_price }}" ]]; then
            content=$(cat config.json)
            
            # Set fixed values
            content=$(echo "$content" | jq '.currency = "BRL" | .passengers = 2')

            # Update routes
            if [[ -n "${{ inputs.route1 }}" ]]; then
              route1='${{ inputs.route1 }}'
              content=$(echo "$content" | jq --argjson route "$route1" '.searches[0].origin = $route.origin | .searches[0].destination = $route.destination')
            fi
            if [[ -n "${{ inputs.route2 }}" ]]; then
              route2='${{ inputs.route2 }}'
              content=$(echo "$content" | jq --argjson route "$route2" '.searches[1].origin = $route.origin | .searches[1].destination = $route.destination')
            fi

            # Update date ranges
            if [[ -n "${{ inputs.departure_date_start }}" ]]; then
              content=$(echo "$content" | jq --arg val "${{ inputs.departure_date_start }}" '.searches[].departureDateRange.start = $val')
            fi
            if [[ -n "${{ inputs.departure_date_end }}" ]]; then
              content=$(echo "$content" | jq --arg val "${{ inputs.departure_date_end }}" '.searches[].departureDateRange.end = $val')
            fi
            if [[ -n "${{ inputs.return_date_start }}" ]]; then
              content=$(echo "$content" | jq --arg val "${{ inputs.return_date_start }}" '.searches[].returnDateRange.start = $val')
            fi
            if [[ -n "${{ inputs.return_date_end }}" ]]; then
              content=$(echo "$content" | jq --arg val "${{ inputs.return_date_end }}" '.searches[].returnDateRange.end = $val')
            fi

            # Update max price
            if [[ -n "${{ inputs.max_price }}" ]]; then
              content=$(echo "$content" | jq --argjson val ${{ inputs.max_price }} '.maxPrice = $val')
            fi

            # Keep only 2 routes
            content=$(echo "$content" | jq 'if (.searches | length > 2) then .searches = .searches[0:2] else . end')

            echo "$content" > config.json
            cat config.json
          fi
      
      - name: Run price check
        env:
          SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
        run: node fetch-check.js

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 